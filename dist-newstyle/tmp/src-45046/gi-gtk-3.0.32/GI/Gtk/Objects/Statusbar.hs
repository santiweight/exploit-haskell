{-# LANGUAGE TypeApplications #-}


-- | Copyright  : Will Thompson, Iñaki García Etxebarria and Jonas Platte
-- License    : LGPL-2.1
-- Maintainer : Iñaki García Etxebarria
-- 
-- A t'GI.Gtk.Objects.Statusbar.Statusbar' is usually placed along the bottom of an application\'s
-- main t'GI.Gtk.Objects.Window.Window'. It may provide a regular commentary of the application\'s
-- status (as is usually the case in a web browser, for example), or may be
-- used to simply output a message when the status changes, (when an upload
-- is complete in an FTP client, for example).
-- 
-- Status bars in GTK+ maintain a stack of messages. The message at
-- the top of the each bar’s stack is the one that will currently be displayed.
-- 
-- Any messages added to a statusbar’s stack must specify a
-- context id that is used to uniquely identify
-- the source of a message. This context id can be generated by
-- 'GI.Gtk.Objects.Statusbar.statusbarGetContextId', given a message and the statusbar that
-- it will be added to. Note that messages are stored in a stack, and when
-- choosing which message to display, the stack structure is adhered to,
-- regardless of the context identifier of a message.
-- 
-- One could say that a statusbar maintains one stack of messages for
-- display purposes, but allows multiple message producers to maintain
-- sub-stacks of the messages they produced (via context ids).
-- 
-- Status bars are created using 'GI.Gtk.Objects.Statusbar.statusbarNew'.
-- 
-- Messages are added to the bar’s stack with 'GI.Gtk.Objects.Statusbar.statusbarPush'.
-- 
-- The message at the top of the stack can be removed using
-- 'GI.Gtk.Objects.Statusbar.statusbarPop'. A message can be removed from anywhere in the
-- stack if its message id was recorded at the time it was added. This
-- is done using 'GI.Gtk.Objects.Statusbar.statusbarRemove'.
-- 
-- = CSS node
-- 
-- GtkStatusbar has a single CSS node with name statusbar.

#if (MIN_VERSION_haskell_gi_overloading(1,0,0) && !defined(__HADDOCK_VERSION__))
#define ENABLE_OVERLOADING
#endif

module GI.Gtk.Objects.Statusbar
    ( 

-- * Exported types
    Statusbar(..)                           ,
    IsStatusbar                             ,
    toStatusbar                             ,
    noStatusbar                             ,


 -- * Methods
-- ** Overloaded methods #method:Overloaded methods#

#if defined(ENABLE_OVERLOADING)
    ResolveStatusbarMethod                  ,
#endif


-- ** getContextId #method:getContextId#

#if defined(ENABLE_OVERLOADING)
    StatusbarGetContextIdMethodInfo         ,
#endif
    statusbarGetContextId                   ,


-- ** getMessageArea #method:getMessageArea#

#if defined(ENABLE_OVERLOADING)
    StatusbarGetMessageAreaMethodInfo       ,
#endif
    statusbarGetMessageArea                 ,


-- ** new #method:new#

    statusbarNew                            ,


-- ** pop #method:pop#

#if defined(ENABLE_OVERLOADING)
    StatusbarPopMethodInfo                  ,
#endif
    statusbarPop                            ,


-- ** push #method:push#

#if defined(ENABLE_OVERLOADING)
    StatusbarPushMethodInfo                 ,
#endif
    statusbarPush                           ,


-- ** remove #method:remove#

#if defined(ENABLE_OVERLOADING)
    StatusbarRemoveMethodInfo               ,
#endif
    statusbarRemove                         ,


-- ** removeAll #method:removeAll#

#if defined(ENABLE_OVERLOADING)
    StatusbarRemoveAllMethodInfo            ,
#endif
    statusbarRemoveAll                      ,




 -- * Signals
-- ** textPopped #signal:textPopped#

    C_StatusbarTextPoppedCallback           ,
    StatusbarTextPoppedCallback             ,
#if defined(ENABLE_OVERLOADING)
    StatusbarTextPoppedSignalInfo           ,
#endif
    afterStatusbarTextPopped                ,
    genClosure_StatusbarTextPopped          ,
    mk_StatusbarTextPoppedCallback          ,
    noStatusbarTextPoppedCallback           ,
    onStatusbarTextPopped                   ,
    wrap_StatusbarTextPoppedCallback        ,


-- ** textPushed #signal:textPushed#

    C_StatusbarTextPushedCallback           ,
    StatusbarTextPushedCallback             ,
#if defined(ENABLE_OVERLOADING)
    StatusbarTextPushedSignalInfo           ,
#endif
    afterStatusbarTextPushed                ,
    genClosure_StatusbarTextPushed          ,
    mk_StatusbarTextPushedCallback          ,
    noStatusbarTextPushedCallback           ,
    onStatusbarTextPushed                   ,
    wrap_StatusbarTextPushedCallback        ,




    ) where

import Data.GI.Base.ShortPrelude
import qualified Data.GI.Base.ShortPrelude as SP
import qualified Data.GI.Base.Overloading as O
import qualified Prelude as P

import qualified Data.GI.Base.Attributes as GI.Attributes
import qualified Data.GI.Base.ManagedPtr as B.ManagedPtr
import qualified Data.GI.Base.GClosure as B.GClosure
import qualified Data.GI.Base.GError as B.GError
import qualified Data.GI.Base.GVariant as B.GVariant
import qualified Data.GI.Base.GValue as B.GValue
import qualified Data.GI.Base.GParamSpec as B.GParamSpec
import qualified Data.GI.Base.CallStack as B.CallStack
import qualified Data.GI.Base.Properties as B.Properties
import qualified Data.GI.Base.Signals as B.Signals
import qualified Data.Text as T
import qualified Data.ByteString.Char8 as B
import qualified Data.Map as Map
import qualified Foreign.Ptr as FP
import qualified GHC.OverloadedLabels as OL

import qualified GI.Atk.Interfaces.ImplementorIface as Atk.ImplementorIface
import qualified GI.GObject.Objects.Object as GObject.Object
import {-# SOURCE #-} qualified GI.Gtk.Interfaces.Buildable as Gtk.Buildable
import {-# SOURCE #-} qualified GI.Gtk.Interfaces.Orientable as Gtk.Orientable
import {-# SOURCE #-} qualified GI.Gtk.Objects.Box as Gtk.Box
import {-# SOURCE #-} qualified GI.Gtk.Objects.Container as Gtk.Container
import {-# SOURCE #-} qualified GI.Gtk.Objects.Widget as Gtk.Widget

-- | Memory-managed wrapper type.
newtype Statusbar = Statusbar (ManagedPtr Statusbar)
    deriving (Eq)
foreign import ccall "gtk_statusbar_get_type"
    c_gtk_statusbar_get_type :: IO GType

instance GObject Statusbar where
    gobjectType = c_gtk_statusbar_get_type
    

-- | Convert 'Statusbar' to and from 'Data.GI.Base.GValue.GValue' with 'Data.GI.Base.GValue.toGValue' and 'Data.GI.Base.GValue.fromGValue'.
instance B.GValue.IsGValue Statusbar where
    toGValue o = do
        gtype <- c_gtk_statusbar_get_type
        B.ManagedPtr.withManagedPtr o (B.GValue.buildGValue gtype B.GValue.set_object)
        
    fromGValue gv = do
        ptr <- B.GValue.get_object gv :: IO (Ptr Statusbar)
        B.ManagedPtr.newObject Statusbar ptr
        
    

-- | Type class for types which can be safely cast to `Statusbar`, for instance with `toStatusbar`.
class (GObject o, O.IsDescendantOf Statusbar o) => IsStatusbar o
instance (GObject o, O.IsDescendantOf Statusbar o) => IsStatusbar o

instance O.HasParentTypes Statusbar
type instance O.ParentTypes Statusbar = '[Gtk.Box.Box, Gtk.Container.Container, Gtk.Widget.Widget, GObject.Object.Object, Atk.ImplementorIface.ImplementorIface, Gtk.Buildable.Buildable, Gtk.Orientable.Orientable]

-- | Cast to `Statusbar`, for types for which this is known to be safe. For general casts, use `Data.GI.Base.ManagedPtr.castTo`.
toStatusbar :: (MonadIO m, IsStatusbar o) => o -> m Statusbar
toStatusbar = liftIO . unsafeCastTo Statusbar

-- | A convenience alias for `Nothing` :: `Maybe` `Statusbar`.
noStatusbar :: Maybe Statusbar
noStatusbar = Nothing

#if defined(ENABLE_OVERLOADING)
type family ResolveStatusbarMethod (t :: Symbol) (o :: *) :: * where
    ResolveStatusbarMethod "activate" o = Gtk.Widget.WidgetActivateMethodInfo
    ResolveStatusbarMethod "add" o = Gtk.Container.ContainerAddMethodInfo
    ResolveStatusbarMethod "addAccelerator" o = Gtk.Widget.WidgetAddAcceleratorMethodInfo
    ResolveStatusbarMethod "addChild" o = Gtk.Buildable.BuildableAddChildMethodInfo
    ResolveStatusbarMethod "addDeviceEvents" o = Gtk.Widget.WidgetAddDeviceEventsMethodInfo
    ResolveStatusbarMethod "addEvents" o = Gtk.Widget.WidgetAddEventsMethodInfo
    ResolveStatusbarMethod "addMnemonicLabel" o = Gtk.Widget.WidgetAddMnemonicLabelMethodInfo
    ResolveStatusbarMethod "addTickCallback" o = Gtk.Widget.WidgetAddTickCallbackMethodInfo
    ResolveStatusbarMethod "bindProperty" o = GObject.Object.ObjectBindPropertyMethodInfo
    ResolveStatusbarMethod "bindPropertyFull" o = GObject.Object.ObjectBindPropertyFullMethodInfo
    ResolveStatusbarMethod "canActivateAccel" o = Gtk.Widget.WidgetCanActivateAccelMethodInfo
    ResolveStatusbarMethod "checkResize" o = Gtk.Container.ContainerCheckResizeMethodInfo
    ResolveStatusbarMethod "childFocus" o = Gtk.Widget.WidgetChildFocusMethodInfo
    ResolveStatusbarMethod "childGetProperty" o = Gtk.Container.ContainerChildGetPropertyMethodInfo
    ResolveStatusbarMethod "childNotify" o = Gtk.Container.ContainerChildNotifyMethodInfo
    ResolveStatusbarMethod "childNotifyByPspec" o = Gtk.Container.ContainerChildNotifyByPspecMethodInfo
    ResolveStatusbarMethod "childSetProperty" o = Gtk.Container.ContainerChildSetPropertyMethodInfo
    ResolveStatusbarMethod "childType" o = Gtk.Container.ContainerChildTypeMethodInfo
    ResolveStatusbarMethod "classPath" o = Gtk.Widget.WidgetClassPathMethodInfo
    ResolveStatusbarMethod "computeExpand" o = Gtk.Widget.WidgetComputeExpandMethodInfo
    ResolveStatusbarMethod "constructChild" o = Gtk.Buildable.BuildableConstructChildMethodInfo
    ResolveStatusbarMethod "createPangoContext" o = Gtk.Widget.WidgetCreatePangoContextMethodInfo
    ResolveStatusbarMethod "createPangoLayout" o = Gtk.Widget.WidgetCreatePangoLayoutMethodInfo
    ResolveStatusbarMethod "customFinished" o = Gtk.Buildable.BuildableCustomFinishedMethodInfo
    ResolveStatusbarMethod "customTagEnd" o = Gtk.Buildable.BuildableCustomTagEndMethodInfo
    ResolveStatusbarMethod "customTagStart" o = Gtk.Buildable.BuildableCustomTagStartMethodInfo
    ResolveStatusbarMethod "destroy" o = Gtk.Widget.WidgetDestroyMethodInfo
    ResolveStatusbarMethod "destroyed" o = Gtk.Widget.WidgetDestroyedMethodInfo
    ResolveStatusbarMethod "deviceIsShadowed" o = Gtk.Widget.WidgetDeviceIsShadowedMethodInfo
    ResolveStatusbarMethod "dragBegin" o = Gtk.Widget.WidgetDragBeginMethodInfo
    ResolveStatusbarMethod "dragBeginWithCoordinates" o = Gtk.Widget.WidgetDragBeginWithCoordinatesMethodInfo
    ResolveStatusbarMethod "dragCheckThreshold" o = Gtk.Widget.WidgetDragCheckThresholdMethodInfo
    ResolveStatusbarMethod "dragDestAddImageTargets" o = Gtk.Widget.WidgetDragDestAddImageTargetsMethodInfo
    ResolveStatusbarMethod "dragDestAddTextTargets" o = Gtk.Widget.WidgetDragDestAddTextTargetsMethodInfo
    ResolveStatusbarMethod "dragDestAddUriTargets" o = Gtk.Widget.WidgetDragDestAddUriTargetsMethodInfo
    ResolveStatusbarMethod "dragDestFindTarget" o = Gtk.Widget.WidgetDragDestFindTargetMethodInfo
    ResolveStatusbarMethod "dragDestGetTargetList" o = Gtk.Widget.WidgetDragDestGetTargetListMethodInfo
    ResolveStatusbarMethod "dragDestGetTrackMotion" o = Gtk.Widget.WidgetDragDestGetTrackMotionMethodInfo
    ResolveStatusbarMethod "dragDestSet" o = Gtk.Widget.WidgetDragDestSetMethodInfo
    ResolveStatusbarMethod "dragDestSetProxy" o = Gtk.Widget.WidgetDragDestSetProxyMethodInfo
    ResolveStatusbarMethod "dragDestSetTargetList" o = Gtk.Widget.WidgetDragDestSetTargetListMethodInfo
    ResolveStatusbarMethod "dragDestSetTrackMotion" o = Gtk.Widget.WidgetDragDestSetTrackMotionMethodInfo
    ResolveStatusbarMethod "dragDestUnset" o = Gtk.Widget.WidgetDragDestUnsetMethodInfo
    ResolveStatusbarMethod "dragGetData" o = Gtk.Widget.WidgetDragGetDataMethodInfo
    ResolveStatusbarMethod "dragHighlight" o = Gtk.Widget.WidgetDragHighlightMethodInfo
    ResolveStatusbarMethod "dragSourceAddImageTargets" o = Gtk.Widget.WidgetDragSourceAddImageTargetsMethodInfo
    ResolveStatusbarMethod "dragSourceAddTextTargets" o = Gtk.Widget.WidgetDragSourceAddTextTargetsMethodInfo
    ResolveStatusbarMethod "dragSourceAddUriTargets" o = Gtk.Widget.WidgetDragSourceAddUriTargetsMethodInfo
    ResolveStatusbarMethod "dragSourceGetTargetList" o = Gtk.Widget.WidgetDragSourceGetTargetListMethodInfo
    ResolveStatusbarMethod "dragSourceSet" o = Gtk.Widget.WidgetDragSourceSetMethodInfo
    ResolveStatusbarMethod "dragSourceSetIconGicon" o = Gtk.Widget.WidgetDragSourceSetIconGiconMethodInfo
    ResolveStatusbarMethod "dragSourceSetIconName" o = Gtk.Widget.WidgetDragSourceSetIconNameMethodInfo
    ResolveStatusbarMethod "dragSourceSetIconPixbuf" o = Gtk.Widget.WidgetDragSourceSetIconPixbufMethodInfo
    ResolveStatusbarMethod "dragSourceSetIconStock" o = Gtk.Widget.WidgetDragSourceSetIconStockMethodInfo
    ResolveStatusbarMethod "dragSourceSetTargetList" o = Gtk.Widget.WidgetDragSourceSetTargetListMethodInfo
    ResolveStatusbarMethod "dragSourceUnset" o = Gtk.Widget.WidgetDragSourceUnsetMethodInfo
    ResolveStatusbarMethod "dragUnhighlight" o = Gtk.Widget.WidgetDragUnhighlightMethodInfo
    ResolveStatusbarMethod "draw" o = Gtk.Widget.WidgetDrawMethodInfo
    ResolveStatusbarMethod "ensureStyle" o = Gtk.Widget.WidgetEnsureStyleMethodInfo
    ResolveStatusbarMethod "errorBell" o = Gtk.Widget.WidgetErrorBellMethodInfo
    ResolveStatusbarMethod "event" o = Gtk.Widget.WidgetEventMethodInfo
    ResolveStatusbarMethod "forall" o = Gtk.Container.ContainerForallMethodInfo
    ResolveStatusbarMethod "forceFloating" o = GObject.Object.ObjectForceFloatingMethodInfo
    ResolveStatusbarMethod "foreach" o = Gtk.Container.ContainerForeachMethodInfo
    ResolveStatusbarMethod "freezeChildNotify" o = Gtk.Widget.WidgetFreezeChildNotifyMethodInfo
    ResolveStatusbarMethod "freezeNotify" o = GObject.Object.ObjectFreezeNotifyMethodInfo
    ResolveStatusbarMethod "getv" o = GObject.Object.ObjectGetvMethodInfo
    ResolveStatusbarMethod "grabAdd" o = Gtk.Widget.WidgetGrabAddMethodInfo
    ResolveStatusbarMethod "grabDefault" o = Gtk.Widget.WidgetGrabDefaultMethodInfo
    ResolveStatusbarMethod "grabFocus" o = Gtk.Widget.WidgetGrabFocusMethodInfo
    ResolveStatusbarMethod "grabRemove" o = Gtk.Widget.WidgetGrabRemoveMethodInfo
    ResolveStatusbarMethod "hasDefault" o = Gtk.Widget.WidgetHasDefaultMethodInfo
    ResolveStatusbarMethod "hasFocus" o = Gtk.Widget.WidgetHasFocusMethodInfo
    ResolveStatusbarMethod "hasGrab" o = Gtk.Widget.WidgetHasGrabMethodInfo
    ResolveStatusbarMethod "hasRcStyle" o = Gtk.Widget.WidgetHasRcStyleMethodInfo
    ResolveStatusbarMethod "hasScreen" o = Gtk.Widget.WidgetHasScreenMethodInfo
    ResolveStatusbarMethod "hasVisibleFocus" o = Gtk.Widget.WidgetHasVisibleFocusMethodInfo
    ResolveStatusbarMethod "hide" o = Gtk.Widget.WidgetHideMethodInfo
    ResolveStatusbarMethod "hideOnDelete" o = Gtk.Widget.WidgetHideOnDeleteMethodInfo
    ResolveStatusbarMethod "inDestruction" o = Gtk.Widget.WidgetInDestructionMethodInfo
    ResolveStatusbarMethod "initTemplate" o = Gtk.Widget.WidgetInitTemplateMethodInfo
    ResolveStatusbarMethod "inputShapeCombineRegion" o = Gtk.Widget.WidgetInputShapeCombineRegionMethodInfo
    ResolveStatusbarMethod "insertActionGroup" o = Gtk.Widget.WidgetInsertActionGroupMethodInfo
    ResolveStatusbarMethod "intersect" o = Gtk.Widget.WidgetIntersectMethodInfo
    ResolveStatusbarMethod "isAncestor" o = Gtk.Widget.WidgetIsAncestorMethodInfo
    ResolveStatusbarMethod "isComposited" o = Gtk.Widget.WidgetIsCompositedMethodInfo
    ResolveStatusbarMethod "isDrawable" o = Gtk.Widget.WidgetIsDrawableMethodInfo
    ResolveStatusbarMethod "isFloating" o = GObject.Object.ObjectIsFloatingMethodInfo
    ResolveStatusbarMethod "isFocus" o = Gtk.Widget.WidgetIsFocusMethodInfo
    ResolveStatusbarMethod "isSensitive" o = Gtk.Widget.WidgetIsSensitiveMethodInfo
    ResolveStatusbarMethod "isToplevel" o = Gtk.Widget.WidgetIsToplevelMethodInfo
    ResolveStatusbarMethod "isVisible" o = Gtk.Widget.WidgetIsVisibleMethodInfo
    ResolveStatusbarMethod "keynavFailed" o = Gtk.Widget.WidgetKeynavFailedMethodInfo
    ResolveStatusbarMethod "listAccelClosures" o = Gtk.Widget.WidgetListAccelClosuresMethodInfo
    ResolveStatusbarMethod "listActionPrefixes" o = Gtk.Widget.WidgetListActionPrefixesMethodInfo
    ResolveStatusbarMethod "listMnemonicLabels" o = Gtk.Widget.WidgetListMnemonicLabelsMethodInfo
    ResolveStatusbarMethod "map" o = Gtk.Widget.WidgetMapMethodInfo
    ResolveStatusbarMethod "mnemonicActivate" o = Gtk.Widget.WidgetMnemonicActivateMethodInfo
    ResolveStatusbarMethod "modifyBase" o = Gtk.Widget.WidgetModifyBaseMethodInfo
    ResolveStatusbarMethod "modifyBg" o = Gtk.Widget.WidgetModifyBgMethodInfo
    ResolveStatusbarMethod "modifyCursor" o = Gtk.Widget.WidgetModifyCursorMethodInfo
    ResolveStatusbarMethod "modifyFg" o = Gtk.Widget.WidgetModifyFgMethodInfo
    ResolveStatusbarMethod "modifyFont" o = Gtk.Widget.WidgetModifyFontMethodInfo
    ResolveStatusbarMethod "modifyStyle" o = Gtk.Widget.WidgetModifyStyleMethodInfo
    ResolveStatusbarMethod "modifyText" o = Gtk.Widget.WidgetModifyTextMethodInfo
    ResolveStatusbarMethod "notify" o = GObject.Object.ObjectNotifyMethodInfo
    ResolveStatusbarMethod "notifyByPspec" o = GObject.Object.ObjectNotifyByPspecMethodInfo
    ResolveStatusbarMethod "overrideBackgroundColor" o = Gtk.Widget.WidgetOverrideBackgroundColorMethodInfo
    ResolveStatusbarMethod "overrideColor" o = Gtk.Widget.WidgetOverrideColorMethodInfo
    ResolveStatusbarMethod "overrideCursor" o = Gtk.Widget.WidgetOverrideCursorMethodInfo
    ResolveStatusbarMethod "overrideFont" o = Gtk.Widget.WidgetOverrideFontMethodInfo
    ResolveStatusbarMethod "overrideSymbolicColor" o = Gtk.Widget.WidgetOverrideSymbolicColorMethodInfo
    ResolveStatusbarMethod "packEnd" o = Gtk.Box.BoxPackEndMethodInfo
    ResolveStatusbarMethod "packStart" o = Gtk.Box.BoxPackStartMethodInfo
    ResolveStatusbarMethod "parserFinished" o = Gtk.Buildable.BuildableParserFinishedMethodInfo
    ResolveStatusbarMethod "path" o = Gtk.Widget.WidgetPathMethodInfo
    ResolveStatusbarMethod "pop" o = StatusbarPopMethodInfo
    ResolveStatusbarMethod "propagateDraw" o = Gtk.Container.ContainerPropagateDrawMethodInfo
    ResolveStatusbarMethod "push" o = StatusbarPushMethodInfo
    ResolveStatusbarMethod "queryChildPacking" o = Gtk.Box.BoxQueryChildPackingMethodInfo
    ResolveStatusbarMethod "queueAllocate" o = Gtk.Widget.WidgetQueueAllocateMethodInfo
    ResolveStatusbarMethod "queueComputeExpand" o = Gtk.Widget.WidgetQueueComputeExpandMethodInfo
    ResolveStatusbarMethod "queueDraw" o = Gtk.Widget.WidgetQueueDrawMethodInfo
    ResolveStatusbarMethod "queueDrawArea" o = Gtk.Widget.WidgetQueueDrawAreaMethodInfo
    ResolveStatusbarMethod "queueDrawRegion" o = Gtk.Widget.WidgetQueueDrawRegionMethodInfo
    ResolveStatusbarMethod "queueResize" o = Gtk.Widget.WidgetQueueResizeMethodInfo
    ResolveStatusbarMethod "queueResizeNoRedraw" o = Gtk.Widget.WidgetQueueResizeNoRedrawMethodInfo
    ResolveStatusbarMethod "realize" o = Gtk.Widget.WidgetRealizeMethodInfo
    ResolveStatusbarMethod "ref" o = GObject.Object.ObjectRefMethodInfo
    ResolveStatusbarMethod "refSink" o = GObject.Object.ObjectRefSinkMethodInfo
    ResolveStatusbarMethod "regionIntersect" o = Gtk.Widget.WidgetRegionIntersectMethodInfo
    ResolveStatusbarMethod "registerWindow" o = Gtk.Widget.WidgetRegisterWindowMethodInfo
    ResolveStatusbarMethod "remove" o = StatusbarRemoveMethodInfo
    ResolveStatusbarMethod "removeAccelerator" o = Gtk.Widget.WidgetRemoveAcceleratorMethodInfo
    ResolveStatusbarMethod "removeAll" o = StatusbarRemoveAllMethodInfo
    ResolveStatusbarMethod "removeMnemonicLabel" o = Gtk.Widget.WidgetRemoveMnemonicLabelMethodInfo
    ResolveStatusbarMethod "removeTickCallback" o = Gtk.Widget.WidgetRemoveTickCallbackMethodInfo
    ResolveStatusbarMethod "renderIcon" o = Gtk.Widget.WidgetRenderIconMethodInfo
    ResolveStatusbarMethod "renderIconPixbuf" o = Gtk.Widget.WidgetRenderIconPixbufMethodInfo
    ResolveStatusbarMethod "reorderChild" o = Gtk.Box.BoxReorderChildMethodInfo
    ResolveStatusbarMethod "reparent" o = Gtk.Widget.WidgetReparentMethodInfo
    ResolveStatusbarMethod "resetRcStyles" o = Gtk.Widget.WidgetResetRcStylesMethodInfo
    ResolveStatusbarMethod "resetStyle" o = Gtk.Widget.WidgetResetStyleMethodInfo
    ResolveStatusbarMethod "resizeChildren" o = Gtk.Container.ContainerResizeChildrenMethodInfo
    ResolveStatusbarMethod "runDispose" o = GObject.Object.ObjectRunDisposeMethodInfo
    ResolveStatusbarMethod "sendExpose" o = Gtk.Widget.WidgetSendExposeMethodInfo
    ResolveStatusbarMethod "sendFocusChange" o = Gtk.Widget.WidgetSendFocusChangeMethodInfo
    ResolveStatusbarMethod "shapeCombineRegion" o = Gtk.Widget.WidgetShapeCombineRegionMethodInfo
    ResolveStatusbarMethod "show" o = Gtk.Widget.WidgetShowMethodInfo
    ResolveStatusbarMethod "showAll" o = Gtk.Widget.WidgetShowAllMethodInfo
    ResolveStatusbarMethod "showNow" o = Gtk.Widget.WidgetShowNowMethodInfo
    ResolveStatusbarMethod "sizeAllocate" o = Gtk.Widget.WidgetSizeAllocateMethodInfo
    ResolveStatusbarMethod "sizeAllocateWithBaseline" o = Gtk.Widget.WidgetSizeAllocateWithBaselineMethodInfo
    ResolveStatusbarMethod "sizeRequest" o = Gtk.Widget.WidgetSizeRequestMethodInfo
    ResolveStatusbarMethod "stealData" o = GObject.Object.ObjectStealDataMethodInfo
    ResolveStatusbarMethod "stealQdata" o = GObject.Object.ObjectStealQdataMethodInfo
    ResolveStatusbarMethod "styleAttach" o = Gtk.Widget.WidgetStyleAttachMethodInfo
    ResolveStatusbarMethod "styleGetProperty" o = Gtk.Widget.WidgetStyleGetPropertyMethodInfo
    ResolveStatusbarMethod "thawChildNotify" o = Gtk.Widget.WidgetThawChildNotifyMethodInfo
    ResolveStatusbarMethod "thawNotify" o = GObject.Object.ObjectThawNotifyMethodInfo
    ResolveStatusbarMethod "translateCoordinates" o = Gtk.Widget.WidgetTranslateCoordinatesMethodInfo
    ResolveStatusbarMethod "triggerTooltipQuery" o = Gtk.Widget.WidgetTriggerTooltipQueryMethodInfo
    ResolveStatusbarMethod "unmap" o = Gtk.Widget.WidgetUnmapMethodInfo
    ResolveStatusbarMethod "unparent" o = Gtk.Widget.WidgetUnparentMethodInfo
    ResolveStatusbarMethod "unrealize" o = Gtk.Widget.WidgetUnrealizeMethodInfo
    ResolveStatusbarMethod "unref" o = GObject.Object.ObjectUnrefMethodInfo
    ResolveStatusbarMethod "unregisterWindow" o = Gtk.Widget.WidgetUnregisterWindowMethodInfo
    ResolveStatusbarMethod "unsetFocusChain" o = Gtk.Container.ContainerUnsetFocusChainMethodInfo
    ResolveStatusbarMethod "unsetStateFlags" o = Gtk.Widget.WidgetUnsetStateFlagsMethodInfo
    ResolveStatusbarMethod "watchClosure" o = GObject.Object.ObjectWatchClosureMethodInfo
    ResolveStatusbarMethod "getAccessible" o = Gtk.Widget.WidgetGetAccessibleMethodInfo
    ResolveStatusbarMethod "getActionGroup" o = Gtk.Widget.WidgetGetActionGroupMethodInfo
    ResolveStatusbarMethod "getAllocatedBaseline" o = Gtk.Widget.WidgetGetAllocatedBaselineMethodInfo
    ResolveStatusbarMethod "getAllocatedHeight" o = Gtk.Widget.WidgetGetAllocatedHeightMethodInfo
    ResolveStatusbarMethod "getAllocatedSize" o = Gtk.Widget.WidgetGetAllocatedSizeMethodInfo
    ResolveStatusbarMethod "getAllocatedWidth" o = Gtk.Widget.WidgetGetAllocatedWidthMethodInfo
    ResolveStatusbarMethod "getAllocation" o = Gtk.Widget.WidgetGetAllocationMethodInfo
    ResolveStatusbarMethod "getAncestor" o = Gtk.Widget.WidgetGetAncestorMethodInfo
    ResolveStatusbarMethod "getAppPaintable" o = Gtk.Widget.WidgetGetAppPaintableMethodInfo
    ResolveStatusbarMethod "getBaselinePosition" o = Gtk.Box.BoxGetBaselinePositionMethodInfo
    ResolveStatusbarMethod "getBorderWidth" o = Gtk.Container.ContainerGetBorderWidthMethodInfo
    ResolveStatusbarMethod "getCanDefault" o = Gtk.Widget.WidgetGetCanDefaultMethodInfo
    ResolveStatusbarMethod "getCanFocus" o = Gtk.Widget.WidgetGetCanFocusMethodInfo
    ResolveStatusbarMethod "getCenterWidget" o = Gtk.Box.BoxGetCenterWidgetMethodInfo
    ResolveStatusbarMethod "getChildRequisition" o = Gtk.Widget.WidgetGetChildRequisitionMethodInfo
    ResolveStatusbarMethod "getChildVisible" o = Gtk.Widget.WidgetGetChildVisibleMethodInfo
    ResolveStatusbarMethod "getChildren" o = Gtk.Container.ContainerGetChildrenMethodInfo
    ResolveStatusbarMethod "getClip" o = Gtk.Widget.WidgetGetClipMethodInfo
    ResolveStatusbarMethod "getClipboard" o = Gtk.Widget.WidgetGetClipboardMethodInfo
    ResolveStatusbarMethod "getCompositeName" o = Gtk.Widget.WidgetGetCompositeNameMethodInfo
    ResolveStatusbarMethod "getContextId" o = StatusbarGetContextIdMethodInfo
    ResolveStatusbarMethod "getData" o = GObject.Object.ObjectGetDataMethodInfo
    ResolveStatusbarMethod "getDeviceEnabled" o = Gtk.Widget.WidgetGetDeviceEnabledMethodInfo
    ResolveStatusbarMethod "getDeviceEvents" o = Gtk.Widget.WidgetGetDeviceEventsMethodInfo
    ResolveStatusbarMethod "getDirection" o = Gtk.Widget.WidgetGetDirectionMethodInfo
    ResolveStatusbarMethod "getDisplay" o = Gtk.Widget.WidgetGetDisplayMethodInfo
    ResolveStatusbarMethod "getDoubleBuffered" o = Gtk.Widget.WidgetGetDoubleBufferedMethodInfo
    ResolveStatusbarMethod "getEvents" o = Gtk.Widget.WidgetGetEventsMethodInfo
    ResolveStatusbarMethod "getFocusChain" o = Gtk.Container.ContainerGetFocusChainMethodInfo
    ResolveStatusbarMethod "getFocusChild" o = Gtk.Container.ContainerGetFocusChildMethodInfo
    ResolveStatusbarMethod "getFocusHadjustment" o = Gtk.Container.ContainerGetFocusHadjustmentMethodInfo
    ResolveStatusbarMethod "getFocusOnClick" o = Gtk.Widget.WidgetGetFocusOnClickMethodInfo
    ResolveStatusbarMethod "getFocusVadjustment" o = Gtk.Container.ContainerGetFocusVadjustmentMethodInfo
    ResolveStatusbarMethod "getFontMap" o = Gtk.Widget.WidgetGetFontMapMethodInfo
    ResolveStatusbarMethod "getFontOptions" o = Gtk.Widget.WidgetGetFontOptionsMethodInfo
    ResolveStatusbarMethod "getFrameClock" o = Gtk.Widget.WidgetGetFrameClockMethodInfo
    ResolveStatusbarMethod "getHalign" o = Gtk.Widget.WidgetGetHalignMethodInfo
    ResolveStatusbarMethod "getHasTooltip" o = Gtk.Widget.WidgetGetHasTooltipMethodInfo
    ResolveStatusbarMethod "getHasWindow" o = Gtk.Widget.WidgetGetHasWindowMethodInfo
    ResolveStatusbarMethod "getHexpand" o = Gtk.Widget.WidgetGetHexpandMethodInfo
    ResolveStatusbarMethod "getHexpandSet" o = Gtk.Widget.WidgetGetHexpandSetMethodInfo
    ResolveStatusbarMethod "getHomogeneous" o = Gtk.Box.BoxGetHomogeneousMethodInfo
    ResolveStatusbarMethod "getInternalChild" o = Gtk.Buildable.BuildableGetInternalChildMethodInfo
    ResolveStatusbarMethod "getMapped" o = Gtk.Widget.WidgetGetMappedMethodInfo
    ResolveStatusbarMethod "getMarginBottom" o = Gtk.Widget.WidgetGetMarginBottomMethodInfo
    ResolveStatusbarMethod "getMarginEnd" o = Gtk.Widget.WidgetGetMarginEndMethodInfo
    ResolveStatusbarMethod "getMarginLeft" o = Gtk.Widget.WidgetGetMarginLeftMethodInfo
    ResolveStatusbarMethod "getMarginRight" o = Gtk.Widget.WidgetGetMarginRightMethodInfo
    ResolveStatusbarMethod "getMarginStart" o = Gtk.Widget.WidgetGetMarginStartMethodInfo
    ResolveStatusbarMethod "getMarginTop" o = Gtk.Widget.WidgetGetMarginTopMethodInfo
    ResolveStatusbarMethod "getMessageArea" o = StatusbarGetMessageAreaMethodInfo
    ResolveStatusbarMethod "getModifierMask" o = Gtk.Widget.WidgetGetModifierMaskMethodInfo
    ResolveStatusbarMethod "getModifierStyle" o = Gtk.Widget.WidgetGetModifierStyleMethodInfo
    ResolveStatusbarMethod "getName" o = Gtk.Widget.WidgetGetNameMethodInfo
    ResolveStatusbarMethod "getNoShowAll" o = Gtk.Widget.WidgetGetNoShowAllMethodInfo
    ResolveStatusbarMethod "getOpacity" o = Gtk.Widget.WidgetGetOpacityMethodInfo
    ResolveStatusbarMethod "getOrientation" o = Gtk.Orientable.OrientableGetOrientationMethodInfo
    ResolveStatusbarMethod "getPangoContext" o = Gtk.Widget.WidgetGetPangoContextMethodInfo
    ResolveStatusbarMethod "getParent" o = Gtk.Widget.WidgetGetParentMethodInfo
    ResolveStatusbarMethod "getParentWindow" o = Gtk.Widget.WidgetGetParentWindowMethodInfo
    ResolveStatusbarMethod "getPath" o = Gtk.Widget.WidgetGetPathMethodInfo
    ResolveStatusbarMethod "getPathForChild" o = Gtk.Container.ContainerGetPathForChildMethodInfo
    ResolveStatusbarMethod "getPointer" o = Gtk.Widget.WidgetGetPointerMethodInfo
    ResolveStatusbarMethod "getPreferredHeight" o = Gtk.Widget.WidgetGetPreferredHeightMethodInfo
    ResolveStatusbarMethod "getPreferredHeightAndBaselineForWidth" o = Gtk.Widget.WidgetGetPreferredHeightAndBaselineForWidthMethodInfo
    ResolveStatusbarMethod "getPreferredHeightForWidth" o = Gtk.Widget.WidgetGetPreferredHeightForWidthMethodInfo
    ResolveStatusbarMethod "getPreferredSize" o = Gtk.Widget.WidgetGetPreferredSizeMethodInfo
    ResolveStatusbarMethod "getPreferredWidth" o = Gtk.Widget.WidgetGetPreferredWidthMethodInfo
    ResolveStatusbarMethod "getPreferredWidthForHeight" o = Gtk.Widget.WidgetGetPreferredWidthForHeightMethodInfo
    ResolveStatusbarMethod "getProperty" o = GObject.Object.ObjectGetPropertyMethodInfo
    ResolveStatusbarMethod "getQdata" o = GObject.Object.ObjectGetQdataMethodInfo
    ResolveStatusbarMethod "getRealized" o = Gtk.Widget.WidgetGetRealizedMethodInfo
    ResolveStatusbarMethod "getReceivesDefault" o = Gtk.Widget.WidgetGetReceivesDefaultMethodInfo
    ResolveStatusbarMethod "getRequestMode" o = Gtk.Widget.WidgetGetRequestModeMethodInfo
    ResolveStatusbarMethod "getRequisition" o = Gtk.Widget.WidgetGetRequisitionMethodInfo
    ResolveStatusbarMethod "getResizeMode" o = Gtk.Container.ContainerGetResizeModeMethodInfo
    ResolveStatusbarMethod "getRootWindow" o = Gtk.Widget.WidgetGetRootWindowMethodInfo
    ResolveStatusbarMethod "getScaleFactor" o = Gtk.Widget.WidgetGetScaleFactorMethodInfo
    ResolveStatusbarMethod "getScreen" o = Gtk.Widget.WidgetGetScreenMethodInfo
    ResolveStatusbarMethod "getSensitive" o = Gtk.Widget.WidgetGetSensitiveMethodInfo
    ResolveStatusbarMethod "getSettings" o = Gtk.Widget.WidgetGetSettingsMethodInfo
    ResolveStatusbarMethod "getSizeRequest" o = Gtk.Widget.WidgetGetSizeRequestMethodInfo
    ResolveStatusbarMethod "getSpacing" o = Gtk.Box.BoxGetSpacingMethodInfo
    ResolveStatusbarMethod "getState" o = Gtk.Widget.WidgetGetStateMethodInfo
    ResolveStatusbarMethod "getStateFlags" o = Gtk.Widget.WidgetGetStateFlagsMethodInfo
    ResolveStatusbarMethod "getStyle" o = Gtk.Widget.WidgetGetStyleMethodInfo
    ResolveStatusbarMethod "getStyleContext" o = Gtk.Widget.WidgetGetStyleContextMethodInfo
    ResolveStatusbarMethod "getSupportMultidevice" o = Gtk.Widget.WidgetGetSupportMultideviceMethodInfo
    ResolveStatusbarMethod "getTemplateChild" o = Gtk.Widget.WidgetGetTemplateChildMethodInfo
    ResolveStatusbarMethod "getTooltipMarkup" o = Gtk.Widget.WidgetGetTooltipMarkupMethodInfo
    ResolveStatusbarMethod "getTooltipText" o = Gtk.Widget.WidgetGetTooltipTextMethodInfo
    ResolveStatusbarMethod "getTooltipWindow" o = Gtk.Widget.WidgetGetTooltipWindowMethodInfo
    ResolveStatusbarMethod "getToplevel" o = Gtk.Widget.WidgetGetToplevelMethodInfo
    ResolveStatusbarMethod "getValign" o = Gtk.Widget.WidgetGetValignMethodInfo
    ResolveStatusbarMethod "getValignWithBaseline" o = Gtk.Widget.WidgetGetValignWithBaselineMethodInfo
    ResolveStatusbarMethod "getVexpand" o = Gtk.Widget.WidgetGetVexpandMethodInfo
    ResolveStatusbarMethod "getVexpandSet" o = Gtk.Widget.WidgetGetVexpandSetMethodInfo
    ResolveStatusbarMethod "getVisible" o = Gtk.Widget.WidgetGetVisibleMethodInfo
    ResolveStatusbarMethod "getVisual" o = Gtk.Widget.WidgetGetVisualMethodInfo
    ResolveStatusbarMethod "getWindow" o = Gtk.Widget.WidgetGetWindowMethodInfo
    ResolveStatusbarMethod "setAccelPath" o = Gtk.Widget.WidgetSetAccelPathMethodInfo
    ResolveStatusbarMethod "setAllocation" o = Gtk.Widget.WidgetSetAllocationMethodInfo
    ResolveStatusbarMethod "setAppPaintable" o = Gtk.Widget.WidgetSetAppPaintableMethodInfo
    ResolveStatusbarMethod "setBaselinePosition" o = Gtk.Box.BoxSetBaselinePositionMethodInfo
    ResolveStatusbarMethod "setBorderWidth" o = Gtk.Container.ContainerSetBorderWidthMethodInfo
    ResolveStatusbarMethod "setBuildableProperty" o = Gtk.Buildable.BuildableSetBuildablePropertyMethodInfo
    ResolveStatusbarMethod "setCanDefault" o = Gtk.Widget.WidgetSetCanDefaultMethodInfo
    ResolveStatusbarMethod "setCanFocus" o = Gtk.Widget.WidgetSetCanFocusMethodInfo
    ResolveStatusbarMethod "setCenterWidget" o = Gtk.Box.BoxSetCenterWidgetMethodInfo
    ResolveStatusbarMethod "setChildPacking" o = Gtk.Box.BoxSetChildPackingMethodInfo
    ResolveStatusbarMethod "setChildVisible" o = Gtk.Widget.WidgetSetChildVisibleMethodInfo
    ResolveStatusbarMethod "setClip" o = Gtk.Widget.WidgetSetClipMethodInfo
    ResolveStatusbarMethod "setCompositeName" o = Gtk.Widget.WidgetSetCompositeNameMethodInfo
    ResolveStatusbarMethod "setData" o = GObject.Object.ObjectSetDataMethodInfo
    ResolveStatusbarMethod "setDataFull" o = GObject.Object.ObjectSetDataFullMethodInfo
    ResolveStatusbarMethod "setDeviceEnabled" o = Gtk.Widget.WidgetSetDeviceEnabledMethodInfo
    ResolveStatusbarMethod "setDeviceEvents" o = Gtk.Widget.WidgetSetDeviceEventsMethodInfo
    ResolveStatusbarMethod "setDirection" o = Gtk.Widget.WidgetSetDirectionMethodInfo
    ResolveStatusbarMethod "setDoubleBuffered" o = Gtk.Widget.WidgetSetDoubleBufferedMethodInfo
    ResolveStatusbarMethod "setEvents" o = Gtk.Widget.WidgetSetEventsMethodInfo
    ResolveStatusbarMethod "setFocusChain" o = Gtk.Container.ContainerSetFocusChainMethodInfo
    ResolveStatusbarMethod "setFocusChild" o = Gtk.Container.ContainerSetFocusChildMethodInfo
    ResolveStatusbarMethod "setFocusHadjustment" o = Gtk.Container.ContainerSetFocusHadjustmentMethodInfo
    ResolveStatusbarMethod "setFocusOnClick" o = Gtk.Widget.WidgetSetFocusOnClickMethodInfo
    ResolveStatusbarMethod "setFocusVadjustment" o = Gtk.Container.ContainerSetFocusVadjustmentMethodInfo
    ResolveStatusbarMethod "setFontMap" o = Gtk.Widget.WidgetSetFontMapMethodInfo
    ResolveStatusbarMethod "setFontOptions" o = Gtk.Widget.WidgetSetFontOptionsMethodInfo
    ResolveStatusbarMethod "setHalign" o = Gtk.Widget.WidgetSetHalignMethodInfo
    ResolveStatusbarMethod "setHasTooltip" o = Gtk.Widget.WidgetSetHasTooltipMethodInfo
    ResolveStatusbarMethod "setHasWindow" o = Gtk.Widget.WidgetSetHasWindowMethodInfo
    ResolveStatusbarMethod "setHexpand" o = Gtk.Widget.WidgetSetHexpandMethodInfo
    ResolveStatusbarMethod "setHexpandSet" o = Gtk.Widget.WidgetSetHexpandSetMethodInfo
    ResolveStatusbarMethod "setHomogeneous" o = Gtk.Box.BoxSetHomogeneousMethodInfo
    ResolveStatusbarMethod "setMapped" o = Gtk.Widget.WidgetSetMappedMethodInfo
    ResolveStatusbarMethod "setMarginBottom" o = Gtk.Widget.WidgetSetMarginBottomMethodInfo
    ResolveStatusbarMethod "setMarginEnd" o = Gtk.Widget.WidgetSetMarginEndMethodInfo
    ResolveStatusbarMethod "setMarginLeft" o = Gtk.Widget.WidgetSetMarginLeftMethodInfo
    ResolveStatusbarMethod "setMarginRight" o = Gtk.Widget.WidgetSetMarginRightMethodInfo
    ResolveStatusbarMethod "setMarginStart" o = Gtk.Widget.WidgetSetMarginStartMethodInfo
    ResolveStatusbarMethod "setMarginTop" o = Gtk.Widget.WidgetSetMarginTopMethodInfo
    ResolveStatusbarMethod "setName" o = Gtk.Widget.WidgetSetNameMethodInfo
    ResolveStatusbarMethod "setNoShowAll" o = Gtk.Widget.WidgetSetNoShowAllMethodInfo
    ResolveStatusbarMethod "setOpacity" o = Gtk.Widget.WidgetSetOpacityMethodInfo
    ResolveStatusbarMethod "setOrientation" o = Gtk.Orientable.OrientableSetOrientationMethodInfo
    ResolveStatusbarMethod "setParent" o = Gtk.Widget.WidgetSetParentMethodInfo
    ResolveStatusbarMethod "setParentWindow" o = Gtk.Widget.WidgetSetParentWindowMethodInfo
    ResolveStatusbarMethod "setProperty" o = GObject.Object.ObjectSetPropertyMethodInfo
    ResolveStatusbarMethod "setRealized" o = Gtk.Widget.WidgetSetRealizedMethodInfo
    ResolveStatusbarMethod "setReallocateRedraws" o = Gtk.Container.ContainerSetReallocateRedrawsMethodInfo
    ResolveStatusbarMethod "setReceivesDefault" o = Gtk.Widget.WidgetSetReceivesDefaultMethodInfo
    ResolveStatusbarMethod "setRedrawOnAllocate" o = Gtk.Widget.WidgetSetRedrawOnAllocateMethodInfo
    ResolveStatusbarMethod "setResizeMode" o = Gtk.Container.ContainerSetResizeModeMethodInfo
    ResolveStatusbarMethod "setSensitive" o = Gtk.Widget.WidgetSetSensitiveMethodInfo
    ResolveStatusbarMethod "setSizeRequest" o = Gtk.Widget.WidgetSetSizeRequestMethodInfo
    ResolveStatusbarMethod "setSpacing" o = Gtk.Box.BoxSetSpacingMethodInfo
    ResolveStatusbarMethod "setState" o = Gtk.Widget.WidgetSetStateMethodInfo
    ResolveStatusbarMethod "setStateFlags" o = Gtk.Widget.WidgetSetStateFlagsMethodInfo
    ResolveStatusbarMethod "setStyle" o = Gtk.Widget.WidgetSetStyleMethodInfo
    ResolveStatusbarMethod "setSupportMultidevice" o = Gtk.Widget.WidgetSetSupportMultideviceMethodInfo
    ResolveStatusbarMethod "setTooltipMarkup" o = Gtk.Widget.WidgetSetTooltipMarkupMethodInfo
    ResolveStatusbarMethod "setTooltipText" o = Gtk.Widget.WidgetSetTooltipTextMethodInfo
    ResolveStatusbarMethod "setTooltipWindow" o = Gtk.Widget.WidgetSetTooltipWindowMethodInfo
    ResolveStatusbarMethod "setValign" o = Gtk.Widget.WidgetSetValignMethodInfo
    ResolveStatusbarMethod "setVexpand" o = Gtk.Widget.WidgetSetVexpandMethodInfo
    ResolveStatusbarMethod "setVexpandSet" o = Gtk.Widget.WidgetSetVexpandSetMethodInfo
    ResolveStatusbarMethod "setVisible" o = Gtk.Widget.WidgetSetVisibleMethodInfo
    ResolveStatusbarMethod "setVisual" o = Gtk.Widget.WidgetSetVisualMethodInfo
    ResolveStatusbarMethod "setWindow" o = Gtk.Widget.WidgetSetWindowMethodInfo
    ResolveStatusbarMethod l o = O.MethodResolutionFailed l o

instance (info ~ ResolveStatusbarMethod t Statusbar, O.MethodInfo info Statusbar p) => OL.IsLabel t (Statusbar -> p) where
#if MIN_VERSION_base(4,10,0)
    fromLabel = O.overloadedMethod @info
#else
    fromLabel _ = O.overloadedMethod @info
#endif

#endif

-- signal Statusbar::text-popped
-- | Is emitted whenever a new message is popped off a statusbar\'s stack.
type StatusbarTextPoppedCallback =
    Word32
    -- ^ /@contextId@/: the context id of the relevant message\/statusbar
    -> T.Text
    -- ^ /@text@/: the message that was just popped
    -> IO ()

-- | A convenience synonym for @`Nothing` :: `Maybe` `StatusbarTextPoppedCallback`@.
noStatusbarTextPoppedCallback :: Maybe StatusbarTextPoppedCallback
noStatusbarTextPoppedCallback = Nothing

-- | Type for the callback on the (unwrapped) C side.
type C_StatusbarTextPoppedCallback =
    Ptr () ->                               -- object
    Word32 ->
    CString ->
    Ptr () ->                               -- user_data
    IO ()

-- | Generate a function pointer callable from C code, from a `C_StatusbarTextPoppedCallback`.
foreign import ccall "wrapper"
    mk_StatusbarTextPoppedCallback :: C_StatusbarTextPoppedCallback -> IO (FunPtr C_StatusbarTextPoppedCallback)

-- | Wrap the callback into a `GClosure`.
genClosure_StatusbarTextPopped :: MonadIO m => StatusbarTextPoppedCallback -> m (GClosure C_StatusbarTextPoppedCallback)
genClosure_StatusbarTextPopped cb = liftIO $ do
    let cb' = wrap_StatusbarTextPoppedCallback cb
    mk_StatusbarTextPoppedCallback cb' >>= B.GClosure.newGClosure


-- | Wrap a `StatusbarTextPoppedCallback` into a `C_StatusbarTextPoppedCallback`.
wrap_StatusbarTextPoppedCallback ::
    StatusbarTextPoppedCallback ->
    C_StatusbarTextPoppedCallback
wrap_StatusbarTextPoppedCallback _cb _ contextId text _ = do
    text' <- cstringToText text
    _cb  contextId text'


-- | Connect a signal handler for the [textPopped](#signal:textPopped) signal, to be run before the default handler.
-- When <https://github.com/haskell-gi/haskell-gi/wiki/Overloading overloading> is enabled, this is equivalent to
-- 
-- @
-- 'Data.GI.Base.Signals.on' statusbar #textPopped callback
-- @
-- 
-- 
onStatusbarTextPopped :: (IsStatusbar a, MonadIO m) => a -> StatusbarTextPoppedCallback -> m SignalHandlerId
onStatusbarTextPopped obj cb = liftIO $ do
    let cb' = wrap_StatusbarTextPoppedCallback cb
    cb'' <- mk_StatusbarTextPoppedCallback cb'
    connectSignalFunPtr obj "text-popped" cb'' SignalConnectBefore Nothing

-- | Connect a signal handler for the [textPopped](#signal:textPopped) signal, to be run after the default handler.
-- When <https://github.com/haskell-gi/haskell-gi/wiki/Overloading overloading> is enabled, this is equivalent to
-- 
-- @
-- 'Data.GI.Base.Signals.after' statusbar #textPopped callback
-- @
-- 
-- 
afterStatusbarTextPopped :: (IsStatusbar a, MonadIO m) => a -> StatusbarTextPoppedCallback -> m SignalHandlerId
afterStatusbarTextPopped obj cb = liftIO $ do
    let cb' = wrap_StatusbarTextPoppedCallback cb
    cb'' <- mk_StatusbarTextPoppedCallback cb'
    connectSignalFunPtr obj "text-popped" cb'' SignalConnectAfter Nothing


#if defined(ENABLE_OVERLOADING)
data StatusbarTextPoppedSignalInfo
instance SignalInfo StatusbarTextPoppedSignalInfo where
    type HaskellCallbackType StatusbarTextPoppedSignalInfo = StatusbarTextPoppedCallback
    connectSignal obj cb connectMode detail = do
        let cb' = wrap_StatusbarTextPoppedCallback cb
        cb'' <- mk_StatusbarTextPoppedCallback cb'
        connectSignalFunPtr obj "text-popped" cb'' connectMode detail

#endif

-- signal Statusbar::text-pushed
-- | Is emitted whenever a new message gets pushed onto a statusbar\'s stack.
type StatusbarTextPushedCallback =
    Word32
    -- ^ /@contextId@/: the context id of the relevant message\/statusbar
    -> T.Text
    -- ^ /@text@/: the message that was pushed
    -> IO ()

-- | A convenience synonym for @`Nothing` :: `Maybe` `StatusbarTextPushedCallback`@.
noStatusbarTextPushedCallback :: Maybe StatusbarTextPushedCallback
noStatusbarTextPushedCallback = Nothing

-- | Type for the callback on the (unwrapped) C side.
type C_StatusbarTextPushedCallback =
    Ptr () ->                               -- object
    Word32 ->
    CString ->
    Ptr () ->                               -- user_data
    IO ()

-- | Generate a function pointer callable from C code, from a `C_StatusbarTextPushedCallback`.
foreign import ccall "wrapper"
    mk_StatusbarTextPushedCallback :: C_StatusbarTextPushedCallback -> IO (FunPtr C_StatusbarTextPushedCallback)

-- | Wrap the callback into a `GClosure`.
genClosure_StatusbarTextPushed :: MonadIO m => StatusbarTextPushedCallback -> m (GClosure C_StatusbarTextPushedCallback)
genClosure_StatusbarTextPushed cb = liftIO $ do
    let cb' = wrap_StatusbarTextPushedCallback cb
    mk_StatusbarTextPushedCallback cb' >>= B.GClosure.newGClosure


-- | Wrap a `StatusbarTextPushedCallback` into a `C_StatusbarTextPushedCallback`.
wrap_StatusbarTextPushedCallback ::
    StatusbarTextPushedCallback ->
    C_StatusbarTextPushedCallback
wrap_StatusbarTextPushedCallback _cb _ contextId text _ = do
    text' <- cstringToText text
    _cb  contextId text'


-- | Connect a signal handler for the [textPushed](#signal:textPushed) signal, to be run before the default handler.
-- When <https://github.com/haskell-gi/haskell-gi/wiki/Overloading overloading> is enabled, this is equivalent to
-- 
-- @
-- 'Data.GI.Base.Signals.on' statusbar #textPushed callback
-- @
-- 
-- 
onStatusbarTextPushed :: (IsStatusbar a, MonadIO m) => a -> StatusbarTextPushedCallback -> m SignalHandlerId
onStatusbarTextPushed obj cb = liftIO $ do
    let cb' = wrap_StatusbarTextPushedCallback cb
    cb'' <- mk_StatusbarTextPushedCallback cb'
    connectSignalFunPtr obj "text-pushed" cb'' SignalConnectBefore Nothing

-- | Connect a signal handler for the [textPushed](#signal:textPushed) signal, to be run after the default handler.
-- When <https://github.com/haskell-gi/haskell-gi/wiki/Overloading overloading> is enabled, this is equivalent to
-- 
-- @
-- 'Data.GI.Base.Signals.after' statusbar #textPushed callback
-- @
-- 
-- 
afterStatusbarTextPushed :: (IsStatusbar a, MonadIO m) => a -> StatusbarTextPushedCallback -> m SignalHandlerId
afterStatusbarTextPushed obj cb = liftIO $ do
    let cb' = wrap_StatusbarTextPushedCallback cb
    cb'' <- mk_StatusbarTextPushedCallback cb'
    connectSignalFunPtr obj "text-pushed" cb'' SignalConnectAfter Nothing


#if defined(ENABLE_OVERLOADING)
data StatusbarTextPushedSignalInfo
instance SignalInfo StatusbarTextPushedSignalInfo where
    type HaskellCallbackType StatusbarTextPushedSignalInfo = StatusbarTextPushedCallback
    connectSignal obj cb connectMode detail = do
        let cb' = wrap_StatusbarTextPushedCallback cb
        cb'' <- mk_StatusbarTextPushedCallback cb'
        connectSignalFunPtr obj "text-pushed" cb'' connectMode detail

#endif

#if defined(ENABLE_OVERLOADING)
instance O.HasAttributeList Statusbar
type instance O.AttributeList Statusbar = StatusbarAttributeList
type StatusbarAttributeList = ('[ '("appPaintable", Gtk.Widget.WidgetAppPaintablePropertyInfo), '("baselinePosition", Gtk.Box.BoxBaselinePositionPropertyInfo), '("borderWidth", Gtk.Container.ContainerBorderWidthPropertyInfo), '("canDefault", Gtk.Widget.WidgetCanDefaultPropertyInfo), '("canFocus", Gtk.Widget.WidgetCanFocusPropertyInfo), '("child", Gtk.Container.ContainerChildPropertyInfo), '("compositeChild", Gtk.Widget.WidgetCompositeChildPropertyInfo), '("doubleBuffered", Gtk.Widget.WidgetDoubleBufferedPropertyInfo), '("events", Gtk.Widget.WidgetEventsPropertyInfo), '("expand", Gtk.Widget.WidgetExpandPropertyInfo), '("focusOnClick", Gtk.Widget.WidgetFocusOnClickPropertyInfo), '("halign", Gtk.Widget.WidgetHalignPropertyInfo), '("hasDefault", Gtk.Widget.WidgetHasDefaultPropertyInfo), '("hasFocus", Gtk.Widget.WidgetHasFocusPropertyInfo), '("hasTooltip", Gtk.Widget.WidgetHasTooltipPropertyInfo), '("heightRequest", Gtk.Widget.WidgetHeightRequestPropertyInfo), '("hexpand", Gtk.Widget.WidgetHexpandPropertyInfo), '("hexpandSet", Gtk.Widget.WidgetHexpandSetPropertyInfo), '("homogeneous", Gtk.Box.BoxHomogeneousPropertyInfo), '("isFocus", Gtk.Widget.WidgetIsFocusPropertyInfo), '("margin", Gtk.Widget.WidgetMarginPropertyInfo), '("marginBottom", Gtk.Widget.WidgetMarginBottomPropertyInfo), '("marginEnd", Gtk.Widget.WidgetMarginEndPropertyInfo), '("marginLeft", Gtk.Widget.WidgetMarginLeftPropertyInfo), '("marginRight", Gtk.Widget.WidgetMarginRightPropertyInfo), '("marginStart", Gtk.Widget.WidgetMarginStartPropertyInfo), '("marginTop", Gtk.Widget.WidgetMarginTopPropertyInfo), '("name", Gtk.Widget.WidgetNamePropertyInfo), '("noShowAll", Gtk.Widget.WidgetNoShowAllPropertyInfo), '("opacity", Gtk.Widget.WidgetOpacityPropertyInfo), '("orientation", Gtk.Orientable.OrientableOrientationPropertyInfo), '("parent", Gtk.Widget.WidgetParentPropertyInfo), '("receivesDefault", Gtk.Widget.WidgetReceivesDefaultPropertyInfo), '("resizeMode", Gtk.Container.ContainerResizeModePropertyInfo), '("scaleFactor", Gtk.Widget.WidgetScaleFactorPropertyInfo), '("sensitive", Gtk.Widget.WidgetSensitivePropertyInfo), '("spacing", Gtk.Box.BoxSpacingPropertyInfo), '("style", Gtk.Widget.WidgetStylePropertyInfo), '("tooltipMarkup", Gtk.Widget.WidgetTooltipMarkupPropertyInfo), '("tooltipText", Gtk.Widget.WidgetTooltipTextPropertyInfo), '("valign", Gtk.Widget.WidgetValignPropertyInfo), '("vexpand", Gtk.Widget.WidgetVexpandPropertyInfo), '("vexpandSet", Gtk.Widget.WidgetVexpandSetPropertyInfo), '("visible", Gtk.Widget.WidgetVisiblePropertyInfo), '("widthRequest", Gtk.Widget.WidgetWidthRequestPropertyInfo), '("window", Gtk.Widget.WidgetWindowPropertyInfo)] :: [(Symbol, *)])
#endif

#if defined(ENABLE_OVERLOADING)
#endif

#if defined(ENABLE_OVERLOADING)
type instance O.SignalList Statusbar = StatusbarSignalList
type StatusbarSignalList = ('[ '("accelClosuresChanged", Gtk.Widget.WidgetAccelClosuresChangedSignalInfo), '("add", Gtk.Container.ContainerAddSignalInfo), '("buttonPressEvent", Gtk.Widget.WidgetButtonPressEventSignalInfo), '("buttonReleaseEvent", Gtk.Widget.WidgetButtonReleaseEventSignalInfo), '("canActivateAccel", Gtk.Widget.WidgetCanActivateAccelSignalInfo), '("checkResize", Gtk.Container.ContainerCheckResizeSignalInfo), '("childNotify", Gtk.Widget.WidgetChildNotifySignalInfo), '("compositedChanged", Gtk.Widget.WidgetCompositedChangedSignalInfo), '("configureEvent", Gtk.Widget.WidgetConfigureEventSignalInfo), '("damageEvent", Gtk.Widget.WidgetDamageEventSignalInfo), '("deleteEvent", Gtk.Widget.WidgetDeleteEventSignalInfo), '("destroy", Gtk.Widget.WidgetDestroySignalInfo), '("destroyEvent", Gtk.Widget.WidgetDestroyEventSignalInfo), '("directionChanged", Gtk.Widget.WidgetDirectionChangedSignalInfo), '("dragBegin", Gtk.Widget.WidgetDragBeginSignalInfo), '("dragDataDelete", Gtk.Widget.WidgetDragDataDeleteSignalInfo), '("dragDataGet", Gtk.Widget.WidgetDragDataGetSignalInfo), '("dragDataReceived", Gtk.Widget.WidgetDragDataReceivedSignalInfo), '("dragDrop", Gtk.Widget.WidgetDragDropSignalInfo), '("dragEnd", Gtk.Widget.WidgetDragEndSignalInfo), '("dragFailed", Gtk.Widget.WidgetDragFailedSignalInfo), '("dragLeave", Gtk.Widget.WidgetDragLeaveSignalInfo), '("dragMotion", Gtk.Widget.WidgetDragMotionSignalInfo), '("draw", Gtk.Widget.WidgetDrawSignalInfo), '("enterNotifyEvent", Gtk.Widget.WidgetEnterNotifyEventSignalInfo), '("event", Gtk.Widget.WidgetEventSignalInfo), '("eventAfter", Gtk.Widget.WidgetEventAfterSignalInfo), '("focus", Gtk.Widget.WidgetFocusSignalInfo), '("focusInEvent", Gtk.Widget.WidgetFocusInEventSignalInfo), '("focusOutEvent", Gtk.Widget.WidgetFocusOutEventSignalInfo), '("grabBrokenEvent", Gtk.Widget.WidgetGrabBrokenEventSignalInfo), '("grabFocus", Gtk.Widget.WidgetGrabFocusSignalInfo), '("grabNotify", Gtk.Widget.WidgetGrabNotifySignalInfo), '("hide", Gtk.Widget.WidgetHideSignalInfo), '("hierarchyChanged", Gtk.Widget.WidgetHierarchyChangedSignalInfo), '("keyPressEvent", Gtk.Widget.WidgetKeyPressEventSignalInfo), '("keyReleaseEvent", Gtk.Widget.WidgetKeyReleaseEventSignalInfo), '("keynavFailed", Gtk.Widget.WidgetKeynavFailedSignalInfo), '("leaveNotifyEvent", Gtk.Widget.WidgetLeaveNotifyEventSignalInfo), '("map", Gtk.Widget.WidgetMapSignalInfo), '("mapEvent", Gtk.Widget.WidgetMapEventSignalInfo), '("mnemonicActivate", Gtk.Widget.WidgetMnemonicActivateSignalInfo), '("motionNotifyEvent", Gtk.Widget.WidgetMotionNotifyEventSignalInfo), '("moveFocus", Gtk.Widget.WidgetMoveFocusSignalInfo), '("notify", GObject.Object.ObjectNotifySignalInfo), '("parentSet", Gtk.Widget.WidgetParentSetSignalInfo), '("popupMenu", Gtk.Widget.WidgetPopupMenuSignalInfo), '("propertyNotifyEvent", Gtk.Widget.WidgetPropertyNotifyEventSignalInfo), '("proximityInEvent", Gtk.Widget.WidgetProximityInEventSignalInfo), '("proximityOutEvent", Gtk.Widget.WidgetProximityOutEventSignalInfo), '("queryTooltip", Gtk.Widget.WidgetQueryTooltipSignalInfo), '("realize", Gtk.Widget.WidgetRealizeSignalInfo), '("remove", Gtk.Container.ContainerRemoveSignalInfo), '("screenChanged", Gtk.Widget.WidgetScreenChangedSignalInfo), '("scrollEvent", Gtk.Widget.WidgetScrollEventSignalInfo), '("selectionClearEvent", Gtk.Widget.WidgetSelectionClearEventSignalInfo), '("selectionGet", Gtk.Widget.WidgetSelectionGetSignalInfo), '("selectionNotifyEvent", Gtk.Widget.WidgetSelectionNotifyEventSignalInfo), '("selectionReceived", Gtk.Widget.WidgetSelectionReceivedSignalInfo), '("selectionRequestEvent", Gtk.Widget.WidgetSelectionRequestEventSignalInfo), '("setFocusChild", Gtk.Container.ContainerSetFocusChildSignalInfo), '("show", Gtk.Widget.WidgetShowSignalInfo), '("showHelp", Gtk.Widget.WidgetShowHelpSignalInfo), '("sizeAllocate", Gtk.Widget.WidgetSizeAllocateSignalInfo), '("stateChanged", Gtk.Widget.WidgetStateChangedSignalInfo), '("stateFlagsChanged", Gtk.Widget.WidgetStateFlagsChangedSignalInfo), '("styleSet", Gtk.Widget.WidgetStyleSetSignalInfo), '("styleUpdated", Gtk.Widget.WidgetStyleUpdatedSignalInfo), '("textPopped", StatusbarTextPoppedSignalInfo), '("textPushed", StatusbarTextPushedSignalInfo), '("touchEvent", Gtk.Widget.WidgetTouchEventSignalInfo), '("unmap", Gtk.Widget.WidgetUnmapSignalInfo), '("unmapEvent", Gtk.Widget.WidgetUnmapEventSignalInfo), '("unrealize", Gtk.Widget.WidgetUnrealizeSignalInfo), '("visibilityNotifyEvent", Gtk.Widget.WidgetVisibilityNotifyEventSignalInfo), '("windowStateEvent", Gtk.Widget.WidgetWindowStateEventSignalInfo)] :: [(Symbol, *)])

#endif

-- method Statusbar::new
-- method type : Constructor
-- Args: []
-- Lengths: []
-- returnType: Just (TInterface Name { namespace = "Gtk" , name = "Statusbar" })
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_new" gtk_statusbar_new :: 
    IO (Ptr Statusbar)

-- | Creates a new t'GI.Gtk.Objects.Statusbar.Statusbar' ready for messages.
statusbarNew ::
    (B.CallStack.HasCallStack, MonadIO m) =>
    m Statusbar
    -- ^ __Returns:__ the new t'GI.Gtk.Objects.Statusbar.Statusbar'
statusbarNew  = liftIO $ do
    result <- gtk_statusbar_new
    checkUnexpectedReturnNULL "statusbarNew" result
    result' <- (newObject Statusbar) result
    return result'

#if defined(ENABLE_OVERLOADING)
#endif

-- method Statusbar::get_context_id
-- method type : OrdinaryMethod
-- Args: [ Arg
--           { argCName = "statusbar"
--           , argType =
--               TInterface Name { namespace = "Gtk" , name = "Statusbar" }
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a #GtkStatusbar" , sinceVersion = Nothing }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "context_description"
--           , argType = TBasicType TUTF8
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText =
--                     Just
--                       "textual description of what context\n                      the new message is being used in"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       ]
-- Lengths: []
-- returnType: Just (TBasicType TUInt)
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_get_context_id" gtk_statusbar_get_context_id :: 
    Ptr Statusbar ->                        -- statusbar : TInterface (Name {namespace = "Gtk", name = "Statusbar"})
    CString ->                              -- context_description : TBasicType TUTF8
    IO Word32

-- | Returns a new context identifier, given a description
-- of the actual context. Note that the description is
-- not shown in the UI.
statusbarGetContextId ::
    (B.CallStack.HasCallStack, MonadIO m, IsStatusbar a) =>
    a
    -- ^ /@statusbar@/: a t'GI.Gtk.Objects.Statusbar.Statusbar'
    -> T.Text
    -- ^ /@contextDescription@/: textual description of what context
    --                       the new message is being used in
    -> m Word32
    -- ^ __Returns:__ an integer id
statusbarGetContextId statusbar contextDescription = liftIO $ do
    statusbar' <- unsafeManagedPtrCastPtr statusbar
    contextDescription' <- textToCString contextDescription
    result <- gtk_statusbar_get_context_id statusbar' contextDescription'
    touchManagedPtr statusbar
    freeMem contextDescription'
    return result

#if defined(ENABLE_OVERLOADING)
data StatusbarGetContextIdMethodInfo
instance (signature ~ (T.Text -> m Word32), MonadIO m, IsStatusbar a) => O.MethodInfo StatusbarGetContextIdMethodInfo a signature where
    overloadedMethod = statusbarGetContextId

#endif

-- method Statusbar::get_message_area
-- method type : OrdinaryMethod
-- Args: [ Arg
--           { argCName = "statusbar"
--           , argType =
--               TInterface Name { namespace = "Gtk" , name = "Statusbar" }
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a #GtkStatusbar" , sinceVersion = Nothing }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       ]
-- Lengths: []
-- returnType: Just (TInterface Name { namespace = "Gtk" , name = "Box" })
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_get_message_area" gtk_statusbar_get_message_area :: 
    Ptr Statusbar ->                        -- statusbar : TInterface (Name {namespace = "Gtk", name = "Statusbar"})
    IO (Ptr Gtk.Box.Box)

-- | Retrieves the box containing the label widget.
-- 
-- /Since: 2.20/
statusbarGetMessageArea ::
    (B.CallStack.HasCallStack, MonadIO m, IsStatusbar a) =>
    a
    -- ^ /@statusbar@/: a t'GI.Gtk.Objects.Statusbar.Statusbar'
    -> m Gtk.Box.Box
    -- ^ __Returns:__ a t'GI.Gtk.Objects.Box.Box'
statusbarGetMessageArea statusbar = liftIO $ do
    statusbar' <- unsafeManagedPtrCastPtr statusbar
    result <- gtk_statusbar_get_message_area statusbar'
    checkUnexpectedReturnNULL "statusbarGetMessageArea" result
    result' <- (newObject Gtk.Box.Box) result
    touchManagedPtr statusbar
    return result'

#if defined(ENABLE_OVERLOADING)
data StatusbarGetMessageAreaMethodInfo
instance (signature ~ (m Gtk.Box.Box), MonadIO m, IsStatusbar a) => O.MethodInfo StatusbarGetMessageAreaMethodInfo a signature where
    overloadedMethod = statusbarGetMessageArea

#endif

-- method Statusbar::pop
-- method type : OrdinaryMethod
-- Args: [ Arg
--           { argCName = "statusbar"
--           , argType =
--               TInterface Name { namespace = "Gtk" , name = "Statusbar" }
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a #GtkStatusbar" , sinceVersion = Nothing }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "context_id"
--           , argType = TBasicType TUInt
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a context identifier"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       ]
-- Lengths: []
-- returnType: Nothing
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_pop" gtk_statusbar_pop :: 
    Ptr Statusbar ->                        -- statusbar : TInterface (Name {namespace = "Gtk", name = "Statusbar"})
    Word32 ->                               -- context_id : TBasicType TUInt
    IO ()

-- | Removes the first message in the t'GI.Gtk.Objects.Statusbar.Statusbar'’s stack
-- with the given context id.
-- 
-- Note that this may not change the displayed message, if
-- the message at the top of the stack has a different
-- context id.
statusbarPop ::
    (B.CallStack.HasCallStack, MonadIO m, IsStatusbar a) =>
    a
    -- ^ /@statusbar@/: a t'GI.Gtk.Objects.Statusbar.Statusbar'
    -> Word32
    -- ^ /@contextId@/: a context identifier
    -> m ()
statusbarPop statusbar contextId = liftIO $ do
    statusbar' <- unsafeManagedPtrCastPtr statusbar
    gtk_statusbar_pop statusbar' contextId
    touchManagedPtr statusbar
    return ()

#if defined(ENABLE_OVERLOADING)
data StatusbarPopMethodInfo
instance (signature ~ (Word32 -> m ()), MonadIO m, IsStatusbar a) => O.MethodInfo StatusbarPopMethodInfo a signature where
    overloadedMethod = statusbarPop

#endif

-- method Statusbar::push
-- method type : OrdinaryMethod
-- Args: [ Arg
--           { argCName = "statusbar"
--           , argType =
--               TInterface Name { namespace = "Gtk" , name = "Statusbar" }
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a #GtkStatusbar" , sinceVersion = Nothing }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "context_id"
--           , argType = TBasicType TUInt
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText =
--                     Just
--                       "the message\8217s context id, as returned by\n             gtk_statusbar_get_context_id()"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "text"
--           , argType = TBasicType TUTF8
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "the message to add to the statusbar"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       ]
-- Lengths: []
-- returnType: Just (TBasicType TUInt)
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_push" gtk_statusbar_push :: 
    Ptr Statusbar ->                        -- statusbar : TInterface (Name {namespace = "Gtk", name = "Statusbar"})
    Word32 ->                               -- context_id : TBasicType TUInt
    CString ->                              -- text : TBasicType TUTF8
    IO Word32

-- | Pushes a new message onto a statusbar’s stack.
statusbarPush ::
    (B.CallStack.HasCallStack, MonadIO m, IsStatusbar a) =>
    a
    -- ^ /@statusbar@/: a t'GI.Gtk.Objects.Statusbar.Statusbar'
    -> Word32
    -- ^ /@contextId@/: the message’s context id, as returned by
    --              'GI.Gtk.Objects.Statusbar.statusbarGetContextId'
    -> T.Text
    -- ^ /@text@/: the message to add to the statusbar
    -> m Word32
    -- ^ __Returns:__ a message id that can be used with
    --          'GI.Gtk.Objects.Statusbar.statusbarRemove'.
statusbarPush statusbar contextId text = liftIO $ do
    statusbar' <- unsafeManagedPtrCastPtr statusbar
    text' <- textToCString text
    result <- gtk_statusbar_push statusbar' contextId text'
    touchManagedPtr statusbar
    freeMem text'
    return result

#if defined(ENABLE_OVERLOADING)
data StatusbarPushMethodInfo
instance (signature ~ (Word32 -> T.Text -> m Word32), MonadIO m, IsStatusbar a) => O.MethodInfo StatusbarPushMethodInfo a signature where
    overloadedMethod = statusbarPush

#endif

-- method Statusbar::remove
-- method type : OrdinaryMethod
-- Args: [ Arg
--           { argCName = "statusbar"
--           , argType =
--               TInterface Name { namespace = "Gtk" , name = "Statusbar" }
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a #GtkStatusbar" , sinceVersion = Nothing }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "context_id"
--           , argType = TBasicType TUInt
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a context identifier"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "message_id"
--           , argType = TBasicType TUInt
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText =
--                     Just "a message identifier, as returned by gtk_statusbar_push()"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       ]
-- Lengths: []
-- returnType: Nothing
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_remove" gtk_statusbar_remove :: 
    Ptr Statusbar ->                        -- statusbar : TInterface (Name {namespace = "Gtk", name = "Statusbar"})
    Word32 ->                               -- context_id : TBasicType TUInt
    Word32 ->                               -- message_id : TBasicType TUInt
    IO ()

-- | Forces the removal of a message from a statusbar’s stack.
-- The exact /@contextId@/ and /@messageId@/ must be specified.
statusbarRemove ::
    (B.CallStack.HasCallStack, MonadIO m, IsStatusbar a) =>
    a
    -- ^ /@statusbar@/: a t'GI.Gtk.Objects.Statusbar.Statusbar'
    -> Word32
    -- ^ /@contextId@/: a context identifier
    -> Word32
    -- ^ /@messageId@/: a message identifier, as returned by 'GI.Gtk.Objects.Statusbar.statusbarPush'
    -> m ()
statusbarRemove statusbar contextId messageId = liftIO $ do
    statusbar' <- unsafeManagedPtrCastPtr statusbar
    gtk_statusbar_remove statusbar' contextId messageId
    touchManagedPtr statusbar
    return ()

#if defined(ENABLE_OVERLOADING)
data StatusbarRemoveMethodInfo
instance (signature ~ (Word32 -> Word32 -> m ()), MonadIO m, IsStatusbar a) => O.MethodInfo StatusbarRemoveMethodInfo a signature where
    overloadedMethod = statusbarRemove

#endif

-- method Statusbar::remove_all
-- method type : OrdinaryMethod
-- Args: [ Arg
--           { argCName = "statusbar"
--           , argType =
--               TInterface Name { namespace = "Gtk" , name = "Statusbar" }
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a #GtkStatusbar" , sinceVersion = Nothing }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       , Arg
--           { argCName = "context_id"
--           , argType = TBasicType TUInt
--           , direction = DirectionIn
--           , mayBeNull = False
--           , argDoc =
--               Documentation
--                 { rawDocText = Just "a context identifier"
--                 , sinceVersion = Nothing
--                 }
--           , argScope = ScopeTypeInvalid
--           , argClosure = -1
--           , argDestroy = -1
--           , argCallerAllocates = False
--           , transfer = TransferNothing
--           }
--       ]
-- Lengths: []
-- returnType: Nothing
-- throws : False
-- Skip return : False

foreign import ccall "gtk_statusbar_remove_all" gtk_statusbar_remove_all :: 
    Ptr Statusbar ->                        -- statusbar : TInterface (Name {namespace = "Gtk", name = "Statusbar"})
    Word32 ->                               -- context_id : TBasicType TUInt
    IO ()

-- | Forces the removal of all messages from a statusbar\'s
-- stack with the exact /@contextId@/.
-- 
-- /Since: 2.22/
statusbarRemoveAll ::
    (B.CallStack.HasCallStack, MonadIO m, IsStatusbar a) =>
    a
    -- ^ /@statusbar@/: a t'GI.Gtk.Objects.Statusbar.Statusbar'
    -> Word32
    -- ^ /@contextId@/: a context identifier
    -> m ()
statusbarRemoveAll statusbar contextId = liftIO $ do
    statusbar' <- unsafeManagedPtrCastPtr statusbar
    gtk_statusbar_remove_all statusbar' contextId
    touchManagedPtr statusbar
    return ()

#if defined(ENABLE_OVERLOADING)
data StatusbarRemoveAllMethodInfo
instance (signature ~ (Word32 -> m ()), MonadIO m, IsStatusbar a) => O.MethodInfo StatusbarRemoveAllMethodInfo a signature where
    overloadedMethod = statusbarRemoveAll

#endif


